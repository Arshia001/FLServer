namespace servercont FLGrainInterfaces;
namespace serveriface FLGrainInterfaces;
namespace serverimpl FLGrains;
namespace client Network;
namespace clientcont Network.Types;

enum HandShakeMode
{
	ClientID,
	EmailAndPassword,
	RecoveryEmailRequest,
	BazaarToken
	//!! GFGP token
}

handshake
{
	mode: HandShakeMode;
    clientID: guid?;
	email: string?;
	password: string?;
	bazaarToken: string?;
}

enum GameState
{
    New,
    WaitingForSecondPlayer,
    InProgress,
    Finished,
	Expired
}

enum RegistrationStatus
{
	Unregistered,
	EmailAndPassword,
	BazaarToken
}

enum BazaarRegistrationResult
{
	Success,
	AlreadyHaveSameBazaarToken,
	AlreadyHaveOtherBazaarToken,
	AlreadyRegisteredWithOtherMethod,
	AccountWithTokenExists
}

enum Statistics
{
	GamesWon,
	GamesLost,
	GamesEndedInDraw,
	RoundsWon,
	RoundsLost,
	RoundsEndedInDraw,
	BestGameScore,
	BestRoundScore,
	GroupChosen_Param,
	GroupWon_Param,
	GroupLost_Param,
	GroupEndedInDraw_Param,
	WordsPlayedScore_Param,
	WordsPlayedDuplicate,
	WordsCorrected,
	RewardMoneyEarned,
	RoundWinMoneyEarned,
	MoneySpentCustomizations,
	MoneySpentTimePowerup,
	TimePowerupUsed,
	MoneySpentHelpPowerup,
	HelpPowerupUsed,
	MoneySpentGroupChange,
	GroupChangeUsed,
	MoneySpentRevealAnswers,
	RevealAnswersUsed,
	UNUSED_MoneySpentInfinitePlay,
	UNUSED_InfinitePlayUsed,
	GameLostDueToExpiry,
	RoundsCompleted,
	VideoAdsWatched,
	CoinRewardVideoAdsWatched,
	GetCategoryAnswersVideoAdsWatched,
	MoneySpentUpgradeActiveGameLimit,
	UpgradeActiveGameLimitUsed
}

enum LeaderBoardSubject
{
	Score,
	XP
}

enum LeaderBoardGroup
{
	All,
	Friends,
	Clan
}

enum GoldPackTag
{
	None,
	BestValue,
	BestSelling
}

enum IabPurchaseResult
{
	Success,
	AlreadyProcessed,
	Invalid,
	FailedToContactValidationService,
	UnknownError
}

enum RegistrationResult
{
	Success,
	EmailAddressInUse,
	InvalidEmailAddress,
	PasswordNotComplexEnough,
	UsernameInUse,
	AlreadyRegistered,
	InvalidInviteCode
}

enum SetEmailResult
{
	Success,
	NotRegistered,
	EmailAddressInUse,
	InvalidEmailAddress
}

enum SetPasswordResult
{
	Success,
	NotRegistered,
	PasswordNotComplexEnough
}

enum CoinGiftSubject
{
	GiftToAll,
	SuggestedWords,
	SuggestedCategories,
	FriendInvited
}

enum AvatarPartType
{
	HeadShape,
	Hair,
	Eyes,
	Mouth,
	Glasses
}

contract AvatarPartDTO castfrom(FLGrainInterfaces.Utility.AvatarPart server)
{
	PartType: AvatarPartType;
	ID: u16;
}

contract AvatarDTO
{
	Parts: AvatarPartDTO[];
}

contract AvatarPartConfigDTO
{
	PartType: AvatarPartType;
	ID: u16;
	Price: u32;
	MinimumLevel: u16;
}

contract PlayerLeaderBoardInfoDTO
{
	Name: string;
	Avatar: AvatarDTO;
}

contract LeaderBoardEntryDTO
{
	Info: PlayerLeaderBoardInfoDTO?;
	Rank: u64;
	Score: u64;
}

contract PlayerInfoDTO
{
	ID: guid;
	Name: string;
	Level: u32;
	Avatar: AvatarDTO;
}

contract StatisticValueDTO
{
	Statistic: Statistics;
	Parameter: i32;
	Value: u64;
}

contract OwnPlayerInfoDTO
{
	Name: string;
	Email: string?;
	XP: u32;
	Level: u32;
	NotifiedLevel: u32;
	NextLevelXPThreshold: u32;
	Score: u32;
	Rank: u32;
	Gold: u64;
	CurrentNumRoundsWonForReward: u32;
	NextRoundWinRewardTimeRemaining: timespan;
	UpgradedActiveGameLimitTimeRemaining: timespan?;
	StatisticsValues: StatisticValueDTO[];
	RegistrationStatus: RegistrationStatus;
	NotificationsEnabled: bool;
	TutorialProgress: u64;
	CoinRewardVideoNotificationsEnabled: bool?;
	Avatar: AvatarDTO;
	OwnedAvatarParts: AvatarPartDTO[];
	InviteCode: string;
	InviteCodeEntered: bool;
}

contract WordScorePairDTO castfrom(FLGameLogic.WordScorePair)
{
	Word, WordScorePair.word: string;
	Score, WordScorePair.score: u8;
}

contract GameInfoDTO
{
    OtherPlayerInfo: PlayerInfoDTO?;
    NumRounds: u8;
    Categories: string[];
	HaveCategoryAnswers: bool[];
    MyWordsPlayed: WordScorePairDTO[][];
    TheirWordsPlayed: WordScorePairDTO[][]?;
    MyTurnFirst: bool;
    NumTurnsTakenByOpponent: u8;
	Expired: bool;
	ExpiredForMe: bool;
	ExpiryTimeRemaining: timespan?;
	RoundTimeExtensions: u32;
	MyTurnTimeRemaining: timespan?;
	RewardClaimed: bool;
}

contract SimplifiedGameInfoDTO
{
    GameID: guid;
    GameState: GameState;
    OtherPlayerName: string?;
	OtherPlayerAvatar: AvatarDTO?;
    MyTurn: bool;
    MyScore: u8;
    TheirScore: u8;
	WinnerOfExpiredGame: bool;
	ExpiryTimeRemaining: timespan?;
	MyTurnTimeRemaining: timespan?;
	RewardClaimed: bool;
}

contract ConfigValuesDTO castfrom(FLGrainInterfaces.Configuration.ConfigValues server oneway)
{
	NumRoundsToWinToGetReward: u8;
	RoundWinRewardInterval: timespan;
	NumGoldRewardForWinningRounds: u32;
	PriceToRefreshGroups: u32;
	RoundTimeExtension: timespan;
	RoundTimeExtensionPrices: u32[];
	RevealWordPrices: u32[];
	GetAnswersPrice: u32;
	MaxActiveGames: u32;
	UpgradedActiveGameLimitPrice: u32;
	MaxActiveGamesWhenUpgraded: u32;
	NumTimeExtensionsPerRound: u32;
	RefreshGroupsAllowedPerRound: u8;
	UpgradedActiveGameLimitTime: timespan;
	NumRoundsPerGame: u8;
	NumGroupChoices: u8;
	ClientTimePerRound: timespan;
	GameInactivityTimeout: timespan;
	MaxScoreGain: u32;
	MinScoreGain: u32;
	LoserScoreLossRatio: f32;
	WinnerXPGain: u32;
	LoserXPGain: u32;
	DrawXPGain: u32;
	WinnerGoldGain: u32;
	LoserGoldGain: u32;
	DrawGoldGain: u32;
	VideoAdGold: u32;
	InviterReward: u32;
	InviteeReward: u32;
}

contract GoldPackConfigDTO castfrom(FLGrainInterfaces.Configuration.GoldPackConfig server oneway)
{
	Sku: string;
	NumGold: u32;
	Title: string;
	Tag: GoldPackTag;
}

contract VideoAdTrackerInfoDTO
{
	TimeSinceLastWatched: timespan?;
	NumberWatchedToday: u32;
	Interval: timespan;
	NumberPerDay: u32;
}

contract CoinGiftInfoDTO castfrom(FLGrainInterfaces.CoinGiftInfo server oneway)
{
	GiftID: guid;
	Subject: CoinGiftSubject;
	Count: u32;
	Description: string?;
	ExtraData1: string?;
	ExtraData2: string?;
	ExtraData3: string?;
	ExtraData4: string?;
}

contract GroupInfoDTO castfrom (FLGrainInterfaces.Configuration.GroupConfig server oneway)
{
	Name: string;
	ID: u16;
}

endpoint System sys 
{
	notification NumRoundsWonForRewardUpdated rwu
	{
		totalRoundsWon: u32;
	}

	notification StatisticUpdated st
	{
		stat: StatisticValueDTO;
	}

	notification CoinGiftReceived cg
	{
		gift: CoinGiftInfoDTO;
	}

	request GetStartupInfo st
	{
		{}
		->
		{
			playerInfo: OwnPlayerInfoDTO;
			configData: ConfigValuesDTO;
			goldPacks: GoldPackConfigDTO[];
			coinRewardVideo: VideoAdTrackerInfoDTO;
			getCategoryAnswersVideo: VideoAdTrackerInfoDTO;
			coinGifts: CoinGiftInfoDTO[];
			avatarParts: AvatarPartConfigDTO[];
		}
	}

	request TakeRewardForWinningRounds trwr via Player(clientid).TakeRewardForWinningRounds()
	{
		{}
		->
		{
			totalGold: u64;
			timeUntilNextReward: timespan;
		}
	}

	request ActivateUpgradedActiveGameLimit upgl via Player(clientid).ActivateUpgradedActiveGameLimit()
	{
		{}
		->
		{
			success: bool;
			totalGold: u64;
			duration: timespan;
		}
	}

	request GetLeaderBoard lb
	{
		{
			subject: LeaderBoardSubject;
			group: LeaderBoardGroup;
		}
		->
		{
			entries: LeaderBoardEntryDTO[];
		}
	}

	request BuyGoldPack bgp via Player(clientid).ProcessGoldPackPurchase(sku, purchaseToken)
	{
		{
			sku: string;
			purchaseToken: string;
		}
		->
		{
			result: IabPurchaseResult;
			totalGold: u64;
		}
	}

	request SetNotificationsEnabled ne via Player(clientid).SetNotificationsEnabled(enable) { { enable: bool; } -> noresponse }

	request SetCoinRewardVideoNotificationsEnabled crvne via Player(clientid).SetCoinRewardVideoNotificationsEnabled(enable) { { enable: bool; } -> noresponse }

	request Login lg 
	{
		{
			email: string;
			password: string;
		}
		->
		{
			clientID: guid?;
		}
	}

	request PerformRegistration reg via Player(clientid).PerformRegistration(username, email, password, inviteCode)
	{
		{
			username: string;
			email: string;
			password: string;
			inviteCode: string?;
		}
		->
		{
			result: RegistrationResult;
			totalGold: u64;
		}
	}

	request PerformBazaarTokenRegistration regbt via Player(clientid).PerformBazaarTokenRegistration(bazaarToken) { { bazaarToken: string; } -> { result: BazaarRegistrationResult; } }

	request BuyAvatarParts bap via Player(clientid).BuyAvatarParts(parts) { { parts: AvatarPartDTO[]; } -> { success: bool; totalGold: u64; } }

	request ActivateAvatar aav via Player(clientid).ActivateAvatar(avatar) { { avatar: AvatarDTO; } -> {} }

	request SetUsername unm via Player(clientid).SetUsername(username) { { username: string; } -> { result: bool; } }

	request SetEmail eml via Player(clientid).SetEmail(email) { { email: string; } -> { result: SetEmailResult; } }

	request UpdatePassword pwd via Player(clientid).UpdatePassword(password) { { password: string; } -> { result: SetPasswordResult; } }

	request SendPasswordRecoveryLink pwdrl { { email: string; } -> noresponse }

	request RegisterFcmToken fcm via Player(clientid).SetFcmToken(token) { { token: string; } -> noresponse }

	request SetTutorialProgress tutp via Player(clientid).SetTutorialProgress(progress) { { progress: u64; } -> {} }

	request GiveVideoAdReward vadr via Player(clientid).GiveVideoAdReward() { {} -> { totalGold: u64; } }

	request ClaimCoinGift ccg via Player(clientid).ClaimCoinGift(id) { { id: guid; } -> { totalGold: u64?; } }

	request RegisterInviteCode ric via Player(clientid).RegisterInviteCode(code) { { code: string; } -> { gold: u64?; } }

	request SetNotifiedLevel snl via Player(clientid).SetNotifiedLevel(level) { { level: u32; } -> noresponse }
}

endpoint Suggestion sg
{
	request SuggestCategory csug
	{
		{
			name: string;
			words: string;
		}
		-> {}
	}

	request SuggestWord wsug
	{
		{
			categoryName: string;
			words: string[];
		}
		-> {}
	}
}

endpoint Game gm
{
	notification OpponentJoined opj
	{
		gameID: guid;
		opponentInfo: PlayerInfoDTO;
		expiryTimeRemaining: timespan?;
	}

	notification OpponentTurnEnded opr
	{
		gameID: guid;
		roundNumber: u8;
		wordsPlayed: WordScorePairDTO[]?;
		expiryTimeRemaining: timespan?;
	}

	notification GameEnded gend
	{
		gameID: guid;
		myScore: u32;
		theirScore: u32;
		myPlayerScore: u32;
		myPlayerRank: u32;
		myLevel: u32;
		myXP: u32;
		myGold: u64;
		hasReward: bool;
	}

	notification GameExpired gexp
	{
		gameID: guid;
		myWin: bool;
		myPlayerScore: u32;
		myPlayerRank: u32;
		myLevel: u32;
		myXP: u32;
		myGold: u64;
		hasReward: bool;
	}

	request NewGame new
	{
		{}
		->
		{
			gameID: guid;
			opponentInfo: PlayerInfoDTO?;
			numRounds: u8;
			myTurnFirst: bool;
			expiryTimeRemaining: timespan?;
		}
	}

	request StartRound rnd via Game(gameID).StartRound(clientid)
	{
		{
			gameID: guid;
		}
		->
		{
			category: string?;
			haveAnswers: bool?;
			roundTime: timespan?;
			mustChooseGroup: bool;
			groups: GroupInfoDTO[]?;
		}
	}

	request ChooseGroup cgr via Game(gameID).ChooseGroup(clientid, groupID)
	{
		{
			gameID: guid;
			groupID: u16;
		}
		->
		{
			category: string;
			haveAnswers: bool;
			roundTime: timespan;
		}
	}

	request RefreshGroups rgr via Game(gameID).RefreshGroups(clientid)
	{
		{
			gameID: guid;
		}
		->
		{
			groups: GroupInfoDTO[]?;
			totalGold: u64;
		}
	}

	request PlayWord word via Game(gameID).PlayWord(clientid, word)
	{
		{
			gameID: guid;
			word: string;
		}
		->
		{
			wordScore: u8;
			corrected: string;
		}
	}

	request IncreaseRoundTime irt via Game(gameID).IncreaseRoundTime(clientid)
	{
		{
			gameID: guid;
		}
		->
		{
			gold: u64?;
			remainingTime: timespan?;
		}
	}

	request RevealWord rvw via Game(gameID).RevealWord(clientid)
	{
		{
			gameID: guid;
		}
		->
		{
			gold: u64?;
			word: string?;
			wordScore: u8?;
		}
	}

	request EndRound endr
	{
		{
			gameID: guid;
		}
		->
		{
			opponentWords: WordScorePairDTO[]?;
			expiryTimeRemaining: timespan?;
		}
	}

	request GetGameInfo info via Game(gameID).GetGameInfo(clientid)
	{
		{
			gameID: guid;
		}
		->
		{
			gameInfo: GameInfoDTO;
		}
	}
	
	request ClaimGameReward clrw via Player(clientid).ClaimGameReward(gameID) { { gameID: guid; } -> { gold: u64?; } }

	request GetAllGames all
	{
		{}
		->
		{
			games: SimplifiedGameInfoDTO[];
		}
	}

	request ClearGameHistory cgh via Player(clientid).ClearGameHistory() { {} -> { gold: u64?; } }

	request GetAnswers ans via Player(clientid).GetAnswers(category)
	{
		{
			category: string;
		}
		->
		{
			words: string[];
			totalGold: u64?;
		}
	}

	request GetAnswersByVideoAd ansad via Player(clientid).GetAnswersByVideoAd(category)
	{
		{
			category: string;
		}
		->
		{
			words: string[];
		}
	}

	request Vote vote { { category: string; up: bool; } -> noresponse }
}
